name: CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    defaults:
      run:
        # если pyproject.toml в корне — оставь '.'
        working-directory: .

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false  # true, если реально используешь git submodules

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry 2.1.4
        run: pipx install poetry==2.1.4

      - name: Configure Poetry
        run: |
          poetry --version
          poetry config virtualenvs.in-project true

      # (опционально) кэшируем .venv по хэшу lock-файла
      - name: Cache virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.py.outputs.python-version || '3.11' }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.py.outputs.python-version || '3.11' }}-

      - name: Install dependencies (sync)
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: '1'
          PIP_NO_PYTHON_VERSION_WARNING: '1'
        run: poetry sync --no-interaction --all-extras

      - name: Run tests
        run: poetry run pytest -q
