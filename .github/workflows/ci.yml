name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    name: Build & Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    env:
      POETRY_VERSION: 1.8.3
      POETRY_VIRTUALENVS_IN_PROJECT: true
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PIP_NO_PYTHON_VERSION_WARNING: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system build tools (for C/C++ extensions)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential python3-dev

      - name: Install pipx & Poetry (match lockfile)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip pipx
          pipx ensurepath
          if [[ -f poetry.lock ]]; then
            LOCK_POETRY_VERSION=$(grep -m1 -Eo 'Poetry [0-9]+\.[0-9]+(\.[0-9]+)?' poetry.lock | awk '{print $2}' || true)
          else
            LOCK_POETRY_VERSION=""
          fi
          if [[ -n "${LOCK_POETRY_VERSION}" ]]; then
            echo "Installing Poetry ${LOCK_POETRY_VERSION} to match poetry.lock"
            pipx install "poetry==${LOCK_POETRY_VERSION}" || pipx install poetry
          else
            echo "poetry.lock doesn't declare a generator version; installing latest Poetry"
            pipx install poetry
          fi
          poetry --version

      - name: Cache .venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: pypoetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            pypoetry-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install project (with dev deps)
        run: |
          poetry install --no-interaction --all-extras --sync

      - name: Compile Cython extensions
        run: |
          poetry run python build.py

      - name: Show environment
        run: |
          poetry run python -VV
          poetry show --tree

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          # Проверяем наличие pytest через модуль, чтобы не зависеть от консольного скрипта
          if poetry run python - <<'PY'
import importlib.util, sys
sys.exit(0 if importlib.util.find_spec("pytest") else 1)
PY
          then
            poetry run python -m pytest -q
          else
            echo "pytest не найден среди зависимостей; пропускаем тесты."
          fi

      - name: Build sdist & wheel (Cython extensions compiled)
        run: |
          poetry build
          ls -lah dist

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-python-${{ matrix.python-version }}
          path: dist/*

  check-publish:
    name: Validate Publish (dry-run)
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install pipx & Poetry (match lockfile)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip pipx
          pipx ensurepath
          if [[ -f poetry.lock ]]; then
            LOCK_POETRY_VERSION=$(grep -m1 -Eo 'Poetry [0-9]+\.[0-9]+(\.[0-9]+)?' poetry.lock | awk '{print $2}' || true)
          else
            LOCK_POETRY_VERSION=""
          fi
          if [[ -n "${LOCK_POETRY_VERSION}" ]]; then
            echo "Installing Poetry ${LOCK_POETRY_VERSION} to match poetry.lock"
            pipx install "poetry==${LOCK_POETRY_VERSION}" || pipx install poetry
          else
            echo "poetry.lock doesn't declare a generator version; installing latest Poetry"
            pipx install poetry
          fi
          poetry --version

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential python3-dev
          poetry install --no-interaction --sync

      - name: Compile Cython extensions
        run: |
          poetry run python build.py

      - name: Build package
        run: |
          poetry build
          ls -lah dist

      - name: Twine check
        run: |
          python -m pip install --upgrade twine
          twine check dist/*
