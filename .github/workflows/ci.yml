name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: Build & Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13", "3.14"]

    env:
      POETRY_VERSION: 1.8.3
      POETRY_VIRTUALENVS_IN_PROJECT: true    # создаёт .venv в корне репозитория (удобно кешировать)
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PIP_NO_PYTHON_VERSION_WARNING: 1
      # Если у вас есть приватные репозитории, можно добавить POETRY_HTTP_BASIC_* или POETRY_PYPI_TOKEN_*.

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system build tools (for C/C++ extensions)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential

      - name: Install pipx & Poetry
        run: |
          python -m pip install --upgrade pip pipx
          pipx ensurepath
          pipx install "poetry==${POETRY_VERSION}"
          poetry --version

      # Кешируем виртуальное окружение (.venv), кэш pip и кэш Poetry
      - name: Cache .venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: pypoetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            pypoetry-${{ runner.os }}-${{ matrix.python-version }}-

      # Если в pyproject.toml Cython указан в [build-system] requires или как dev-dependency — просто install.
      # Если вам нужен numpy как заголовки для C-расширений, убедитесь, что он есть в зависимостях.
      - name: Install project (with dev deps)
        run: |
          poetry install --no-interaction --all-extras

      - name: Show environment
        run: |
          poetry run python -VV
          poetry show --tree

      - name: Run tests
        run: |
          if poetry run python -c "import pytest" 2>/dev/null; then
            poetry run pytest -q
          else
            echo "pytest не найден среди зависимостей; пропускаем тесты."
          fi

      - name: Build sdist & wheel (Cython extensions compiled)
        run: |
          poetry build
          ls -lah dist

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-python-${{ matrix.python-version }}
          path: dist/*

  # Опционально: проверка публикации без фактического аплоада (dry-run)
  check-publish:
    name: Validate Publish (dry-run)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install pipx & Poetry
        run: |
          python -m pip install --upgrade pip pipx
          pipx ensurepath
          pipx install "poetry==1.8.3"
      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential
          poetry install --no-interaction
      - name: Build package
        run: poetry build
      - name: Twine check
        run: |
          python -m pip install --upgrade twine
          twine check dist/*
